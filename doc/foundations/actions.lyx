#LyX 1.1 created this file. For more info see http://www.lyx.org/
\lyxformat 2.16
\textclass docbook
\language english
\inputencoding latin1
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

Actions
\layout Date

Date
\layout Abstract

This document is a list of the Project Architect's engine defined actions
\layout Section

Introduction
\layout Standard

The Project Architect's engine is implemented as a set of actions and entities.
 Entities are the object the engine manipulate.
 Actions are what the engine does with these entities.
 The following c++ classes implement the basic interface:
\newline 

\layout Code

#include "framework.h" 
\layout Code

\layout Code

class Parameters : public CoreObject
\layout Code

{
\layout Code

};
\layout Code

\layout Code

class EngineEntity : public CoreObject
\layout Code

{
\layout Code

   private:
\layout Code

    integervalue kind;     // kind of entity (parameter table, raw_data
 ...)
\layout Code

    integervalue datatype; // type of entity (Project, Task, ...)
\layout Code

    CoreObject * data;     // data for the entity
\layout Code

};
\layout Code

\layout Code

class EngineAction
\layout Code

{
\layout Code

  private:
\layout Code

    integervalue actioncode; // action code (for routing and identification)
\layout Code

    Service *    service;    // service to which the action code is targetted
\layout Code

    Parameters * params;     // parameter(s) to pass to the service for
 execution
\layout Code

                             // of the action
\layout Code

        
\layout Code

};
\newline 

\layout Code

class EngineService : public Service
\layout Code

{
\layout Code

  public:
\layout Code

    virtual void Action (EngineAction & action) = 0; 
\layout Code

};
\layout Code

\layout Code

\layout Section

The action concept
\layout Subsection

Standard actions
\layout Standard

Standard actions are basic actions.
 These actions can be applied to almost any entity the engine may comprehend.
 Such actions are :
\layout Itemize

Database oriented actions :
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align left \LyXTable
multicol5
6 2 0 0 -1 -1 -1 -1
1 1 0 0
1 0 0 0
1 1 0 0
1 1 0 0
1 1 0 0
1 1 0 0
2 1 0 "" ""
2 1 1 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

Action code
\newline 
Action description
\newline 
DBMS_READ
\newline 
reads one or more row(s) from a table
\newline 
DBMS_APPEND
\newline 
appends one or more row(s) to a table
\newline 
DBMS_DELETE
\newline 
delete one or more row(s) from a table
\newline 
DBMS_UPDATE
\newline 
updates one or more row(s) in the table
\newline 
DBMS_SORT
\newline 
sorts rows from a table or resultset
\layout Itemize

algorithmic oriented actions:
\begin_deeper 
\layout Itemize

data_sort : In memory data sorting 
\end_deeper 
\layout Itemize

gui oriented action (these actions are coming from the gui application and
 are routed to the engine for execution) :
\layout Itemize

GUI_VIEW : Loads and displays a record.
 The user cannot modify the displayed data.
\newline 
GUI_FULLEDIT: Edits an existing record.
 Only a single dialogue can edit a record at a time since this dialogue
 is responsible for the whole entity
\newline 
GUI_PARTIALEDIT: Edits an existing record.
 Multiple dialogs can edit this entity provided dialogs do not overlap (not
 enforced) in terms of attributes responsibility.
 In particular, only a single instance of the entity will be mapped onto
 those dialogs.: 
\layout Itemize

GUI_COMMIT :  Commits an action (ie.
 sends the update to the database).
\layout Subsection

Domain and concept specific actions
\the_end
