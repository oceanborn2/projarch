#LyX 1.1 created this file. For more info see http://www.lyx.org/
\lyxformat 218
\textclass book
\language english
\inputencoding latin1
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

Initial study
\layout Date

Date
\layout Author

Pascal Munerot
\layout Standard


\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Part
\pagebreak_top 
Introduction
\layout Section

What is this document ?
\layout Standard

This document is a detailed and formal description of all the features the
 Project Architect is likely to implement.
\newline 
As the time goes by, this document will be split into sub-parts to accomodate
 separate threads of discussions.
 
\newline 
This document is not yet complete and will be updated whenever necessary
 to match the current design issues.
 
\layout Part

Functional issues
\layout Section

Concept : Information visibility
\begin_inset LatexCommand \index{Information visibility}

\end_inset 


\layout Subsection

Domain management
\begin_inset LatexCommand \index{domain management}

\end_inset 


\layout Standard

There must be a domain management within the Project Architect.
 
\layout Subsubsection

Domain subscription
\begin_inset LatexCommand \index{domain subscription}

\end_inset 


\layout Standard

A user of the Project Architect may decide to subscribe to a domain of the
 Project, that is to be notified of any incoming information item corresponding
 to this domain, with respect to security issues (Some users may not be
 allowed to see everything).
\newline 

\layout Standard
\noindent 
More generally, users shall be able to register many aspects of the project
 life cycle (requests for features, progress, releases, problem management).
 
\layout Section

Concept : 
\begin_inset LatexCommand \index{Documents}

\end_inset 

Documents
\layout Subsection

Document location
\begin_inset LatexCommand \index{document location}

\end_inset 


\layout Standard

The documents should be sheltered in only a few places.
 One major goal of this project is to avoid 
\emph on 
document scattering.

\emph default 
 Today, the increasingly sophisticated communications allow us to exchange
 information and documents in various ways.
 Unfortunately, this is very bad practice because as a consequence information
 is not accessible in one single place.
 Instead, users must search lots of places for documents and information
 that quickly contradict one another (because they have not been maintained
 in a controlled and centralised manner).
 Thus, users have conflicting views of the same piece of information.
 This turns out to be a major reason for delays, bugs and users griefs (which
 may end up as the project's failure)
\layout Subsection

Atomic documents
\begin_inset LatexCommand \index{atomic documents}

\end_inset 

 versus structured documents
\begin_inset LatexCommand \index{structured documents}

\end_inset 


\layout Subsubsection

Atomic documents
\layout Standard

Atomic documents are small, indivisible documents.
 They can be of any type (text, drawing, xml ...) provided that they cannot
 be broken in sub-parts (On the user's point of view.
 Obviously, there may sub-parts as far as the storage point of view is concerned
).
 
\newline 

\newline 
Advantages over structured documents is that version control and identification
 can be very tight.
 These documents may be included in structured documents while still retaining
 their original properties.
 
\layout Subsubsection

Structured documents (also known as complex documents)
\layout Standard

Unlike atomic documents, structured documents can nest other documents (atomic
 documents, links, ...).
 
\layout Subsection

Registered documents
\begin_inset LatexCommand \index{registered documents}

\end_inset 


\layout Standard
\align left 
Registered documents are documents that are considered sheltered and managed
 by the project architect.
 This is a generic concept including both internal format and external format
 documents.
 In particular, this means that the document may not be modified outside
 of the Project Architect influence (Later on, we will introduce variations
 on this)
\newline 

\layout Standard
\noindent 
It also includes version management, property management (keywords, document
 type information, authors, intended audience, links to other documents,
 security information).
\newline 

\layout Standard
\noindent 
Registered documents are given a unique identifier that all users (using
 the engine of course) can refer to.
 It is an important feature because this will allow to keep a tight control
 over a document lifecycle (through revisions, rewrites, publications).
 When speaking of a unique identifier, we mean that this identifier shall
 be 
\emph on 
distributed
\emph default 
 (considered unique over a large network, possibly the whole internet).
 This identifier will contain both a technical and a user visible part.
 The user visible part will be a user level shortcut to the technical id.
 This may be a word, or anything.
 
\newline 

\layout Standard
\noindent 
This basic requirement will make it possible for users to be notified whenever
 a document is modified, wherever they are.
\newline 

\layout Standard
\noindent 
An unregistered document is not considered part of the project and therefore
 not handled at all by the Project Architect.
\layout Subsubsection

External
\begin_inset LatexCommand \index{external documents}

\end_inset 

 and detached documents
\begin_inset LatexCommand \index{detached documents}

\end_inset 


\layout Standard
\noindent 
Some documents may be considered 
\emph on 
detached documents
\emph default 
 if their content is generated by another party not using the Project Architect
 but is still considered part of the project under development.
 An external document is a document outside the project's management (ie.
 is not a part of the project, rather some external documentation).
\layout Subsubsection

Managed document format 
\begin_inset LatexCommand \index{managed document format}

\end_inset 


\layout Standard

Some documents formats will be known to the Project Architect or by one
 of its plugins.
 The Project Architect will consider these document formats as 
\emph on 
managed
\emph default 
 because it knows how to handle them.
 Some document formats may be proprietary and therefore may not be managed.
 This does not mean that it will be unacceptable to register a document
 using such a format.
\newline 

\layout Standard
\noindent 
Put in other words, managed data formats will be easier to manipulate within
 the Project Architect and some constraints (left on other kinds of documents)
 may be lifted.
 
\layout Subsubsection

Document properties
\begin_inset LatexCommand \index{document properties}

\end_inset 


\layout Itemize

Primary maintainer : This may change over time but the full list must be
 kept.
\layout Itemize

Reviewers : It speaks itself.
 Again, there may be many.
\layout Itemize

Acceptance level : Is this document accepted by all involved parties, it
 is still consistent with the current issues\SpecialChar \ldots{}

\layout Itemize

Publication status : 
\begin_deeper 
\layout Itemize

Planned : The need for this document has been clearly expressed
\layout Itemize

Draft : This document is being written but is clearly at an early stage.
 
\layout Itemize

Released/Published : Users other than the author itself can consult the
 documents.
 There will be refinements in the ways a document can be published:
\begin_deeper 
\layout Itemize

restricted publication : Only a subset of the users will be allowed to read
 the document.
 These users may be defined in terms of groups.
\layout Itemize

internally published : All the users can read the document.
\layout Itemize

publically published : Absolutely no restrictions are imposed on the publication
 of the document
\end_deeper 
\layout Itemize

Revised : Documents are often revised.
 Several kinds of revisions may be implemented : 
\begin_deeper 
\layout Itemize

full revisions : Basically, a major (if not near complete) rewrite of the
 document.
 Previous versions of the document will be kept but will not remain directly
 visible to the user.
 
\layout Itemize

partial revisions : These revisions will include patches to the original
 document.
 Control versionning and managed document formats will be important here.
\end_deeper 
\end_deeper 
\layout Itemize

Distribution lists 
\begin_inset LatexCommand \index{distribution lists}

\end_inset 

: To automate distribution of the documents
\layout Itemize

Security
\begin_inset LatexCommand \index{Security}

\end_inset 

 : Security information (see above).
\layout Itemize

Revision control information : This will be different from CVS style version
 management for the following reasons :
\begin_deeper 
\layout Itemize

We want to have a fine-grained control over the kind of information kept
 under control.
 Obviously, file level is too limited.
\layout Itemize

We also want to be able to move some piece of information (or document)
 around without having to go into CVS like manipulations (removing from
 a directory/folder, adding in another, then committing).
 This should be done transparently, at least from the user point of view
 (It may be done like CVS internally) : One must be able to drag and drop
 items easily.
 
\end_deeper 
\layout Itemize

Node structure : A tree depicting the document structure.
 XML is one of the cool language for doing just that, but there are others.
 Not all data formats will allow this (proprietary formats, monolithic formats).
\layout Itemize

IsFolder : Is the document a folder (containing other documents and folder
 => May be handled via node structure).
\layout Subsubsection

Document shell
\begin_inset LatexCommand \index{document shell}

\end_inset 


\layout Standard

A document shell is a data structure allowing to handle modifications to
 a document over time.
 Basically, a document can be revised (minor modifications) or completely
 rewritten (major modifications).
 A document shell is designed to help handle these situations by providing
 a 
\emph on 
shell 
\emph default 
(some sort of document container, sheltering a unique document, including
 all the revisions, whichever way they have been implemented).
\layout Subsection

Folder concept
\begin_inset LatexCommand \index{folder}

\end_inset 


\layout Standard

Create the folder concept : A folder contains everything pertaining to some
 specific field/event during the project lifetime.
 Despite being similar in terms of concepts, a folder shall not be confused
 with a computer directory.
 Actually, a folder may be mapped to more than one directory and more than
 one document.
 A document may be referenced in several folders.
 It may contain links to other folder or directory.
 A directory is considered some kind of dumb folder that has not much flexibilit
y.
\newline 

\layout Standard
\align left 
A folder shall be a hook of the filesystem designed to hide implementation
 details from the user.
 So, we must provide a way to give a visual view of a folder in the form
 of a listview.
 
\newline 

\layout Standard
\align left 
A folder will summarize and be aware (in terms of contextual menus) of document
 information (keywords, version control ...).
\layout Subsection

Information view
\begin_inset LatexCommand \index{information view}

\end_inset 


\layout Standard

This concept consists of implementing differents views of documents and
 information, depending on the user.
 This may be done as automatic reports
\begin_inset LatexCommand \index{reports}

\end_inset 

 (based on some sort of scripting engine).
\newline 

\layout Standard
\noindent 
Stylesheets
\begin_inset LatexCommand \index{Stylesheets}

\end_inset 

 may be used also (XSLT, CSS ...).
\layout Subsection

External documents
\begin_inset LatexCommand \index{external documents}

\end_inset 


\layout Standard

External documents should be allowed access by catalog.
 A catalog can be loaded from the content of a given directory or new entries
 may be added using a dialog (add, edit, new, delete ...)
\layout Subsection

Views 
\begin_inset LatexCommand \index{Views}

\end_inset 


\layout Standard

Several views should be given for a set of information and/or documents.
 Atomic information should be easy to move from/to documents if the document
 is an internal document (ie.
 It has a format that the project architect support.
 Typically, this format will allow for easy information atomicity, be a
 text file of some sort).
\layout Subsection

Document generator and parser
\layout Standard

A system based on plugins to automatically generate documents using always
 the same driver code (or syntax).
 
\newline 

\layout Standard
\align center 
Also, implement a parser for analysing existing documents in order to store
 them in a generic manner.
 This way, documents would be better integrated in the project management
 lifecycle while preserving the ability to generate any formats out of the
 generic version.
 
\newline 
.
\begin_inset Figure size 436 228
file analysis_documents.eps
subcaption Document object model
flags 5

\end_inset 


\layout Section

Dealing with users requests, quality assurance, development progress and
 release time
\layout Subsection

Decision tree feature  
\layout Standard

A decision tree is a model depicting the process of evaluating user requests,
 To be able to track down users requests, acceptance from quality staff,
 development progress in a visual way.
 This shall be made possible by both XML and wxWindows tree widgets (may
 also be represented as listviews).
\newline 

\newline 
Point of views : The decision tree will support the concept of point of
 views.
 Several points of view may be registered before a final decision is taken.
 This allows to keep tracks of all the ideas and to decide clearly which
 one has been validated.
 Once this validation has occurred, it is difficult for the different parties
 to disagree.
 This will increase the overall quality and efficiency.
 
\newline 

\newline 
Decision / point of view revisions : Point of views and decision may be
 revised.
 If a validated decision is revised, then the new version becomes the official
 decision.
 
\layout Part

Technical issues
\layout Section

Architecture issues - Living in a distributed world
\layout Standard

This part gets a lot more technical than the first part.
 Here, we will introduce ideas that will serve as ground for the distributed
 architect used for implementing the Project Architect.
\layout Subsection

Retargettable client applications
\layout Standard

The Project Architect is a client-server (n-tier) application.
 Access to a project repository shall be allowed from different places and
 different setups.
 Basically, an ideal situation would be the following :
\layout Itemize

Client applications : 
\begin_deeper 
\layout Itemize

A client middleware module will serve the purpose of converting and transporting
 the data from the client to the server.
 This middleware is included in the client but is also highly tied to the
 server.
 The reason for which this module is in between the client is that its role
 is mainly to convert data in the client space to data in a serialized form.
 The serialized data is then sent to the server, which executes the query
 and returns the result in a serialized form.
 The middleware will then deserialize the data back to something usable
 in the client address space.
 Something important to understand is that this middleware is not a process
 separate to the client.
 It is part of the client itself (and in particular lies in the same address
 space).
 
\layout Itemize

User interfaces : 
\begin_deeper 
\layout Itemize

A native GUI application, in the standalone style but naturally distributed
 
\layout Itemize

A web interface (to allow use from a browser), with a Java front - end
\end_deeper 
\end_deeper 
\layout Itemize

Server applications : 
\begin_deeper 
\layout Itemize

Engine : In charge of routing everything to the sub-processes, these sub-process
es being in charge of some specific details.
 Scalability, load-balancing and fail-over issues should also be considered.
 Server processes typically handle the hard work of organizing, storing,
 retrieving and processing the information system.
 It comprises an engine organized as a single process.
 
\newline 

\newline 
This process may be cloned in order to achieve load-balancing.
 The engine implements a full server side middleware (very similar to the
 client side middleware but the other way round).
 This module will (de)serialize data and convert it to fit the server process's
 address space.
 Therefore, the middleware is fully part of the server process.
 
\newline 

\newline 
A server middleware module serving the purpose of deserializing the data.
 Like the client middleware, it is not a separate process.
 In the case of the server side, this means that it is part of the engine
 process.
 
\end_deeper 
\layout Standard
\align center 

\begin_inset Figure size 178 252
file architecture_overview.eps
subcaption Architecture design overview
width 3 30
height 3 30
flags 1

\end_inset 


\layout Subsection

Repository structure 
\layout Standard

The repository shall be organized in order to be able to deal with requests
 from many places.
 This shall lead to the following structure:
\layout Itemize

The organisation repository : This is a repository shared by all the organisatio
n and therefore all the users, wherever they are.
 This approach will not be implemented at first because of development priority.
\layout Itemize

The project repository : This will store all information relevant to a project
 (we mean everything).
\layout Standard

It is not yet decided whether the repository shall be organised as a main
 directory or as a binary b-tree style binary file.
 They are big issues since both approaches have drawbacks and advantages
 :
\layout Itemize

Binary b-tree files
\begin_deeper 
\layout Itemize

The information is stored in one place, so backups are facilitated.
\layout Itemize

You can easily store any kind of information, ranging from small information
 items to big documents
\layout Itemize

users cannot easily tinker with the content and may not break it
\layout Itemize

Unfortunately, b-trees must be reorganized often to keep them away from
 corruption
\end_deeper 
\layout Itemize

Directories
\begin_deeper 
\layout Itemize

Information is stored in many places
\layout Itemize

Unfortunately, directories cannot easily store small information items.
 This can be dealt with by using files for storing smaller items.
\end_deeper 
\layout Itemize

Full database systems : 
\begin_deeper 
\layout Itemize

A lot of power in terms of storage and queries.
 
\layout Itemize

Data visibility is good
\layout Itemize

Still, DBMS are limited in their flexibility.
 New concepts cannot be easily added without sacrifing their power.
 Constantly changing data structures or data structures implemented by the
 user are not easily fitted in a database system.
 
\layout Itemize

It adds more administration constraints to the whole system (Installation
 as a server process, another dependency for the project using it).
\end_deeper 
\layout Itemize

Necessary technical modules
\layout Standard

This part is an attempt to list out the modules necessary for the implementation
 of the project This tables contains several entries.
 One for the module description, another for the modules that may use it
 as a supplier of service.
 
\layout Standard
\align left 
Those modules adopt an organisation based upon layers in order to achieve
 modularity, portability and reusability of code.
\layout Section

Implementation model
\layout Subsection

Layers list and description
\layout Itemize

The 
\emph on 
"external layer"
\emph default 
 : It the C++ library used to implement the framework.
 It must be a portable library (wxWindows?).
 It does not explicitly belong to the project but is a supplier for the
 project.
 
\emph on 
WxWindows
\emph default 
 has a lot of nice features.
 A graph module and a great concern for portability are among them.
 A related project, 
\emph on 
wxStudio
\emph default 
 (an IDE for developping 
\emph on 
wxWindows
\emph default 
 applications) is under development and is not yet usable (unfortunately).
\layout Itemize

The 
\emph on 
"framework layer"
\emph default 
 implements a low-level behavior.
 This could be a common framework for several projects.
 It has low level and very generic services.
 It is supposed to be a supplier for concrete implementation of the project.
 Portability problems should be solved in this layer.
 Therefore, this layer shall give a fully portable interface (ie.
 It must provide a consistent set of API for higher level layers.
\layout Itemize

The 
\emph on 
"services layer"
\emph default 
 is a medium level one.
 Less generic and more to the point services.
 Here we implement the core of the project.
 This layer may be split in several parent and sibling layers in a client/provid
er fashion.
 Services must be well isolated and fulfill a small set of services.
 Plugs-in can be hooked here using the API provided by these layers.
\layout Itemize

The 
\emph on 
"application layer"
\emph default 
 is the actual presentation layer (GUI) for the project.
 It may be split across different applications linked together by a common
 interface.
 It allows data entry, processing, reporting, everything the project provides
 to the user ...
\layout Standard
\added_space_top 0cm \added_space_bottom 0cm \align center 

\begin_inset Figure size 178 252
file layers.eps
subcaption Project Architect's layers structure
width 3 30
height 3 30
flags 1

\end_inset 


\layout Subsection

Modules list 
\layout Standard

See the modules list document
\layout Standard

Naming conventions (not well defined at the moment)
\layout Standard

The naming convention is there to facilitate comprehension and maintenance
 of the source code.
 It is as follows :
\layout Standard

A prefix : pa : To give the idea of a namespace (C++ namespace instead)
\layout Standard

The name of the generic services fulfilled by the module : data, server,
 parser, storage, index
\layout Standard

The name of a more specific service : xml ....
 
\layout Standard

Instance id for the module, necessary when several modules are close in
 their behaviour and role.
\layout Standard

Version number : major and minor.
 Better implemented at runtime than at compile time because of the problem
 of name updating.
\layout Subsection

Plugin implementation
\layout Standard

Plugins will be implemented as threads so that they can be pinged whenever
 necessary.
 Also, this will make them more flexible.
 The plugin implementation naturally belongs to the Framework layer.
 
\newline 

\layout Standard
\align left 
In order to ease creation of plugins, a C API and bindings for Perl, Python
 (and Tcl?) will be provided.
\newline 

\layout Standard


\begin_inset LatexCommand \printindex{}

\end_inset 


\the_end
