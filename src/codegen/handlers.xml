<?xml version="1.0" encoding="utf-8"?>

<codegen>

  <!-- used to compute generated file names -->
  <namestrategy id="default_name_strategy">CDATA[sub { my ($name, $ext) = @_; return "$name.$ext";]]</namestrategy>
  <namestrategy id="sql_insert_name_strategy">CDATA[sub { my ($name, $ext) = @_; return "${name}_insert.$ext";]]</namestrategy>
  <namestrategy id="sql_create_name_strategy">CDATA[sub { my ($name, $ext) = @_; return "${name}_create.$ext";]]</namestrategy>
  <namestrategy id="bobject_name_strategy">CDATA[sub { my ($name, $ext) = @_; return "${name}Desc.$ext";]]</namestrategy>
  <namestrategy id="bobjectexc_name_strategy">CDATA[sub { my ($name, $ext) = @_; return "${name}Exception.$ext";]]</namestrategy>
  <namestrategy id="dbobject_name_strategy">CDATA[sub { my ($name, $ext) = @_; return "${name}Dbms.$ext";]]</namestrategy>
  <namestrategy id="value_domain_name_strategy">CDATA[sub { my ($name, $ext) = @_; return "${name}ValueDomain.$ext";]]</namestrategy>
  <namestrategy id="cliserv_name_strategy">CDATA[sub { my ($name, $ext) = @_; return "${name}Client.$ext";]]</namestrategy>
  <namestrategy id="homeserv_name_strategy">CDATA[sub { my ($name, $ext) = @_; return "${name}Home.$ext";]]</namestrategy>

  <!-- used to compute unique names
  Features:
    - id : a unique key needed in order to identify the unique naming system
    - casesensitive : - none = do not change cases
                      - upper= convert to upper cases
                      - lower= convert to lower cases
                      - TODO : implement a custom case handler
    - maxlen : max length for the generated name. If the generated name is longer than maxlen, it will be
      truncated by first tokenizing the name around the space substitution character
    - prefix : A prefix appended at the start of the name

  -->

  <uniquenamesupport
    id="sql_tables_names_support"
    casesensitive="upper"
    maxlen="30"
    prefix="TPA_"
    spacesubst="_"
    procspecnode="1"
    procentries="0"
  />

  <uniquenamesupport
    id="sql_fields_names_support"
    casesensitive="upper"
    maxlen="30"
    prefix=""
    spacesubst="_"
    procspecnode="0"
    procentries="1"
  />

  <uniquenamesupport
    id="java_fields_names_support"
    casesensitive="none"
    maxlen="64"
    prefix=""
    spacesubst="_"
    procspecnode="0"
    procentries="1"
  />

  <uniquenamesupport
    id="java_value_domain_names_support"
    casesensitive="upper"
    maxlen="30"
    prefix=""
    spacesubst="_"
    procspecnode="0"
    procentries="1"
  />

  <uniquenamesupport
    id="java_services_names_support"
    casesensitive="upper"
    maxlen="30"
    prefix=""
    spacesubst="_"
    procspecnode="0"
    procentries="1"
  />

  <!-- define languages that should be supported for this handler definition file -->
  <languagesupport name="java"/>
  <languagesupport name="sql"/>

  <!-- A data model is composed of :
    - a spec node (the root object) with standard and custom attributes
    - any number of entries (entry node) with both standard and custom attributes.
      An entry node can have nested elements (this is not yet implemented)
    - a data model definition points to one or more paths that give the location and patterns of spec files.
      Paths can be traversed recursively (most common case). Package names in java will be affected by the
      traversed directory structure.
  -->
  <datamodel id="busobj" comment="business object">
   <path deep="true" pattern="*.xml">busobj</path>
  </datamodel>

  <datamodel id="value_domain" comment="value domain objects">
   <path deep="true" pattern="*.xml">value_domains</path>
  </datamodel>

  <datamodel id="services" comment="services objects">
   <path deep="true" pattern="*.xml">services</path>
  </datamodel>

  <datamodel id="gui" comment="user interfaces">
   <path deep="true" pattern="*.xml">gui</path>
  </datamodel>


  <!-- A handler has an id and a template file. By defaults, data value types are automatically imported
       but this can be disabled by using typeimports="disable"
  -->

  <!-- BUSOBJ : Business objects -->

  <handler id="bobject" template="$TEMPLATE_ROOT/bobject.tpl" typeimports="enable">
   <import>java.util.*</import>
   <import trimext=".java">%default_name_strategy%</import> <!-- special syntax for importing a name using a name strategy -->
   <language>java</language>
   <namesupport var="tablename">sql_table_import</namesupport>
  </handler>

  <handler id="bobjectexc" template="$TEMPLATE_ROOT/bobjectexc.tpl" typeimports="disable">
   <import>java.util.*</import>
   <import trimext=".java">%default_name_strategy%</import> <!-- special syntax for importing a name using a name strategy -->
   <language>java</language>
   <namesupport var="tablename">sql_table_import</namesupport>
  </handler>

  <handler id="dbobject" template="$TEMPLATE_ROOT/dbobject.tpl" typeimports="enable">
   <import>java.sql.*</import>
   <import>java.util.Vector</import>
   <import>java.util.Hashtable</import>
   <import>java.util.lang.StringBuffer</import>
   <language>java</language>
   <language>sql</language>
   <namesupport var="tablename">sql_tables_names_support</namesupport>
   <namesupport var="sqlfield">sql_fields_names_support</namesupport>
   <namesupport var="javafields">java_fields_names_support</namesupport>
  </handler>

  <handler id="sql_create_table" template="$TEMPLATE_ROOT/sql_create_table.tpl">
  </handler>

  <handler id="sql_insert" template="$TEMPLATE_ROOT/sql_insert.tpl">
  </handler>

  <generate datamodel="busobj">
   <target-handler>bobject</target-handler>i
   <target-handler>bobjectexc</target-handler>
   <target-handler>dbobject</target-handler>
   <target-handler>sql_create_table</target-handler>
   <target-handler>sql_insert</target-handler>
  </generate>

  <!-- VALUE_DOMAINS : Value domain objects -->

  <handler id="valuedomains" template="$TEMPLATE_ROOT/valuedomains.tpl">
  </handler>

  <generate datamodel="value_domain">
   <target-handler>valuedomains</target-handler>
  </generate>

  <!-- SERVICES : Services classes -->

  <handler id="homeserv" template="$TEMPLATE_ROOT/homeserv.tpl">
  </handler>

  <handler id="remoteserv" template="$TEMPLATE_ROOT/homeserv.tpl">
  </handler>

  <handler id="cliserv" template="$TEMPLATE_ROOT/homeserv.tpl">
  </handler>

  <generate datamodel="services">
   <target-handler>homeserv</target-handler>
   <target-handler>remoteserv</target-handler>
   <target-handler>cliserv</target-handler>
  </generate>

</codegen>

